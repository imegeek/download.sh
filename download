#!/usr/bin/bash

A1="\e[1;38;2;0;200;118m"
A2="\e[0;38;2;220;255;255m"
R0="\e[0m"

SPEED=0

blank()
{
printf "\r                                    "
printf "                                      \r"
}

ARG1=$1
ARG2=$2
ARG3=$3


if [[ $(uname -o) == *"Android"* ]]
then
  PRFIX=$PREFIX
else
   PRFIX=/
   TMPDIR=/tmp
fi

PROG() {
printf "$TEXT ${A2}━━━━━━━━━━━━━━━━━━━━━━━━━${R0}   \r"
sleep 0.03
printf "$TEXT ${A1}━${A2}━━━━━━━━━━━━━━━━━━━━━━━━${R0}   \r"
sleep 0.03
printf "$TEXT ${A1}━━${A2}━━━━━━━━━━━━━━━━━━━━━━━${R0}   \r"
sleep 0.03
printf "$TEXT ${A1}━━━${A2}━━━━━━━━━━━━━━━━━━━━━━${R0}   \r"
sleep 0.03
printf "$TEXT ${A1}━━━━${A2}━━━━━━━━━━━━━━━━━━━━━${R0}   \r"
sleep 0.03
printf "$TEXT ${A1}━━━━━${A2}━━━━━━━━━━━━━━━━━━━━${R0}   \r"
sleep 0.03
printf "$TEXT ${A1}━━━━━━${A2}━━━━━━━━━━━━━━━━━━━${R0}   \r"
sleep 0.03
printf "$TEXT ${A1}━━━━━━━${A2}━━━━━━━━━━━━━━━━━━${R0}   \r"
sleep 0.03
printf "$TEXT ${A1}━━━━━━━━${A2}━━━━━━━━━━━━━━━━━${R0}   \r"
sleep 0.03
printf "$TEXT ${A2}━${A1}━━━━━━━━${A2}━━━━━━━━━━━━━━━━${R0}   \r"
sleep 0.03
printf "$TEXT ${A2}━━${A1}━━━━━━━━${A2}━━━━━━━━━━━━━━━${R0}   \r"
sleep 0.03
printf "$TEXT ${A2}━━━${A1}━━━━━━━━${A2}━━━━━━━━━━━━━━${R0}   \r"
sleep 0.03
printf "$TEXT ${A2}━━━━${A1}━━━━━━━━${A2}━━━━━━━━━━━━━${R0}   \r"
sleep 0.03
printf "$TEXT ${A2}━━━━━${A1}━━━━━━━━${A2}━━━━━━━━━━━━${R0}   \r"
sleep 0.03
printf "$TEXT ${A2}━━━━━━${A1}━━━━━━━━${A2}━━━━━━━━━━━${R0}   \r"
sleep 0.03
printf "$TEXT ${A2}━━━━━━━${A1}━━━━━━━━${A2}━━━━━━━━━━${R0}   \r"
sleep 0.03
printf "$TEXT ${A2}━━━━━━━━${A1}━━━━━━━━${A2}━━━━━━━━━${R0}   \r"
sleep 0.03
printf "$TEXT ${A2}━━━━━━━━━${A1}━━━━━━━━${A2}━━━━━━━━${R0}   \r"
sleep 0.03
printf "$TEXT ${A2}━━━━━━━━━━${A1}━━━━━━━━${A2}━━━━━━━${R0}   \r"
sleep 0.03
printf "$TEXT ${A2}━━━━━━━━━━━${A1}━━━━━━━━${A2}━━━━━━${R0}   \r"
sleep 0.03
printf "$TEXT ${A2}━━━━━━━━━━━━${A1}━━━━━━━━${A2}━━━━━${R0}   \r"
sleep 0.03
printf "$TEXT ${A2}━━━━━━━━━━━━━${A1}━━━━━━━━${A2}━━━━${R0}   \r"
sleep 0.03
printf "$TEXT ${A2}━━━━━━━━━━━━━━${A1}━━━━━━━━${A2}━━━${R0}   \r"
sleep 0.03
printf "$TEXT ${A2}━━━━━━━━━━━━━━━${A1}━━━━━━━━${A2}━━${R0}   \r"
sleep 0.03
printf "$TEXT ${A2}━━━━━━━━━━━━━━━━${A1}━━━━━━━━${A2}━${R0}   \r"
sleep 0.03
printf "$TEXT ${A2}━━━━━━━━━━━━━━━━━${A1}━━━━━━━━${A2}${R0}   \r"
sleep 0.03
printf "$TEXT ${A2}━━━━━━━━━━━━━━━━━━${A1}━━━━━━━${R0}   \r"
sleep 0.03
printf "$TEXT ${A2}━━━━━━━━━━━━━━━━━━━${A1}━━━━━━${R0}   \r"
sleep 0.03
printf "$TEXT ${A2}━━━━━━━━━━━━━━━━━━━━${A1}━━━━━${R0}   \r"
sleep 0.03
printf "$TEXT ${A2}━━━━━━━━━━━━━━━━━━━━━${A1}━━━━${R0}   \r"
sleep 0.03
printf "$TEXT ${A2}━━━━━━━━━━━━━━━━━━━━━━${A1}━━━${R0}   \r"
sleep 0.03
printf "$TEXT ${A2}━━━━━━━━━━━━━━━━━━━━━━━${A1}━━${R0}   \r"
sleep 0.03
printf "$TEXT ${A2}━━━━━━━━━━━━━━━━━━━━━━━━${A1}━${R0}   \r"
sleep 0.03
printf "$TEXT ${A2}━━━━━━━━━━━━━━━━━━━━━━━━━${A1}${R0}   \r"
sleep 0.03
}

spinner() {
local pid=$!
#local delay=0

while [ "$(ps a | awk '{print $1}' | grep $pid)" ]; do
for progressbar in PROG
do
        ${progressbar[@]} #printf $((progressbar))
#	sleep $delay
done
done
#printf "Complete ...!                           \n"
}


CURRENT_DIR=$(pwd)

force_stop()
{

TTY=$(tty | cut -c 6-)
CURRENT_PS=$(echo $$)

declare -a psKills=(
$(ps aux | grep $TTY | grep curl | grep -v $CURRENT_PS | grep -v PID | awk '{print $2}' | xargs -n1)
)

PS_NUM=${#psKill[@]}

for m in "${psKills[@]}"
  do
  N_LOOP=$((${N_LOOP:-0}+1))
  PS_CODE=${m::$((${#m}))}
  kill $PS_CODE &> /dev/null
  ((n_NUM++))
done
}

# interrupter
exit_on_signal_SIGINT () {
    echo
    force_stop
    exit 0
}

exit_on_signal_SIGTSTP () {
   echo
   force_stop
   exit 0
}

trap exit_on_signal_SIGINT SIGINT
trap exit_on_signal_SIGTSTP SIGTSTP

estimate_time()
{
    if [[ $2 -gt 0 ]]
    then
       result=$(($1 / ($2/8)))
       result=$((result-8))
       result=$(date -d@${result} -u +%H:%M:%S)
    else
       result="00:00:00              "
    fi
}

rand()
{
cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w ${1:-} | head -n 1
}

function main()
{
function ProgressBar {
# Process data
    let _progress=(${1}*100/${2}*100)/100
    let _done=(${_progress}*3)/10
    let _left=30-$_done
# Build progressbar string lengths
    _fill=$(printf "%${_done}s")
    _empty=$(printf "%${_left}s")

# 1.2 Build progressbar strings and print the ProgressBar line
# 1.2.1 Output example:                           
# 1.2.1.1 Progress : [########################################] 100%

      if [[ $START_SIZE -lt 20 ]]
      then
        C0=$"\e[1;91m"
      elif [[ $START_SIZE -lt 70 ]]
      then
        C0=$'\e[1;93m'
      elif [[ $START_SIZE -ge 70 ]]
      then
        C0=$'\e[1;92m'
      fi
 
R0=$'\e[0m'

sleep 1 | printf "\r$PR_SIZE/$FILE_SIZE MiB ${SP}: ${_fill// /${C0}━${R0}}${_empty// /━} : [${_progress}/100%%] eta \e[92m${result}\e[0m"
}

printf "\r[Retrieving information ...]"
connection()
{
curl -sI 1.1.1.1 &> /dev/null
}


if (! connection == 0)
then
printf "\r[ERR_INTERNET_DISCONNECTED]  
Couldn't connect to server\n"
exit
else
  :
fi

START_SIZE=1
END_SIZE=$(wget --spider $URL 2>&1 | grep Length | awk '{print $2}')
FILE_SIZE=$(echo "scale=1; $END_SIZE / 1024 / 1024" | bc)
F_SIZE=$((END_SIZE/1024/1024))

GETFILENAME()
{
RAND=$(rand 10)
mkdir -p $TMPDIR/.${RAND}
#cd ${TMPDIR}/.${RAND}
LOC=$(ls ${TMPDIR}/.${RAND})
FILE="${TMPDIR}/.${RAND}"
cd $FILE

curl -sO $URL & \
while :
do
  LOC=$(ls ${TMPDIR}/.${RAND})
  if [[ ${#LOC} -gt 0 ]]
  then
    FILE_NAME=$LOC
    force_stop
#    rm ${FILE}/$LOC
    break
  fi
done
}

GETFILENAME
printf "\r"

  if [[ ${ARG2} == "-o" ]]
  then
    if [[ ${#ARG3} -gt 0 ]] && [[ -d ${ARG3} ]]
    then
    CURRENT_DIR="${ARG3}"
    cd ${CURRENT_DIR}
    touch ${CURRENT_DIR}/${FILE_NAME}
  else
     blank
    echo "Directory not found."
    exit 1
    fi
  else
    cd ${CURRENT_DIR}
    touch ${CURRENT_DIR}/${FILE_NAME}
  fi

START_DOWNLOAD()
{
  if [[ ! -f ${CURRENT_DIR}/${FILE_NAME} ]]
  then
     touch ${CURRENT_DIR}/${FILE_NAME}
   else
     echo > $CURRENT_DIR/$FILE_NAME
  fi

if [[ -f $TMPDIR/checksum.download ]]
then
rm $TMPDIR/checksum.download
fi

curl -sLO $1 | md5sum | awk '{print $1}' > $TMPDIR/checksum.download
}

echo -e "Downloading in process : [$FILE_NAME]"

PROGRESS()
{
while [[ $START_SIZE -le 100 ]]
do
    CR_SIZE=$(du -b ${CURRENT_DIR}/${FILE_NAME} | awk '{print $1}')
    CURRENT_SIZE=$CR_SIZE
    ProgressBar ${START_SIZE} 100
    CR_SIZE1=$(du -b ${CURRENT_DIR}/${FILE_NAME} | awk '{print $1}')
    SPEED=$((CR_SIZE1 - CR_SIZE))
    CURRENT_SPEED=$SPEED
    SPEED=$((SPEED /1024))
    if [[ $SPEED -gt "1024" ]]
    then
      SPEED=$((SPEED /1024))
      SP="${SPEED} MiB/s "
    else
      SP="${SPEED} KiB/s "
    fi
    C_SIZE=$(($CR_SIZE/1024/1024))
    PR_SIZE=$(echo "scale=1; $CR_SIZE / 1024 / 1024" | bc)
    START_SIZE=$((100*CR_SIZE/END_SIZE))

#    if [[ $START_SIZE == 99 ]]
#    then
#      CURRENT_SPEED_LAST=${CURRENT_SPEED}
#    fi

    estimate_time ${END_SIZE} ${CURRENT_SPEED}

    if [[ $END_SIZE == $CR_SIZE ]]
    then
      SP=""
      blank
      ProgressBar ${START_SIZE} 100
      echo
      force_stop
      break
    fi
done
}

if [[ $FILE_SIZE == "0" ]]
then
START_DOWNLOAD $URL & \
  FILE_SIZE=\?
  while true
  do
  CR_SIZE=$(du -b ${CURRENT_DIR}/${FILE_NAME} | awk '{print $1}')
  PR_SIZE=$(echo "scale=1; $CR_SIZE / 1024 / 1024" | bc)
  if [[ $SPEED == 0 ]]
  then
    TEXT="${PR_SIZE}/\? MiB 0 KiB/s"
    (sleep 1) &> /dev/null & spinner
  else
    (sleep 1) &> /dev/null & spinner
  fi

    ONLINE_CHECKSUM=$(cat $TMPDIR/checksum.download)

  CR_SIZE1=$(du -b ${CURRENT_DIR}/${FILE_NAME} | awk '{print $1}')
  PR_SIZE1=$(echo "scale=1; $CR_SIZE1 / 1024 / 1024" | bc)
    SPEED=$((CR_SIZE1 - CR_SIZE))
    SPEED=$((SPEED /1024))
    if [[ $SPEED -gt "1024" ]]
    then
      SPEED=$((SPEED /1024))
      TEXT="${PR_SIZE1}/\? MiB ${SPEED} MiB/s"
    else
      TEXT="${PR_SIZE1}/\? MiB ${SPEED} KiB/s"
    fi #& (START_DOWNLOAD $URL) &> /dev/null & spinner

    if [[ ${#ONLINE_CHECKSUM} -gt 0 ]] && [[ ! ${CR_SIZE} -le 1 ]] && [[ ${SPEED} == 0 ]]
    then
    blank
    echo -e "${PR_SIZE}/${PR_SIZE1} MiB ${A1}━━━━━━━━━━━━━━━━━━━━━━━━━${R0}"
    echo -e "Download finished."
    break
    fi
done
else
  START_DOWNLOAD $URL | PROGRESS
fi

}

if [[ ${#1} -gt 0 ]]
then
    URL=$1
    if [[ ${URL} == "http"* ]]
    then
    main
    force_stop
  else
    echo "Invalid url address recheck please."
    exit 1
    fi
else
echo -e "Usage: download <url> [options...]

command:
       download <url>
       download <url> -o <directory_to_save>

e.g:
   download http://212.183.159.230/5MB.zip
"

fi

